version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gardens-net-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: gardens_net
      POSTGRES_USER: gardens_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gardens_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - /DATA/AppData/gardens-net/database:/var/lib/postgresql/data
      - /DATA/AppData/gardens-net/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gardens_user -d gardens_net"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gardens-net

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: gardens-net-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_2024} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - /DATA/AppData/gardens-net/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gardens-net

  # Main Application
  app:
    image: ghcr.io/gardens-net/ecommerce:latest
    container_name: gardens-net-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://gardens_user:${DB_PASSWORD:-gardens_secure_2024}@postgres:5432/gardens_net
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      
      # Application Settings
      NODE_ENV: production
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-casaos_gardens_net_secret_2024}
      
      # MikPos Integration
      MIKPOS_BASE_URL: ${MIKPOS_BASE_URL:-http://192.168.1.100:8080}
      MIKPOS_API_KEY: ${MIKPOS_API_KEY:-}
      MIKPOS_WEBHOOK_URL: ${MIKPOS_WEBHOOK_URL:-}
      MIKPOS_WEBHOOK_SECRET: ${MIKPOS_WEBHOOK_SECRET:-mikpos_webhook_secret_2024}
      MIKPOS_SYNC_ENABLED: ${MIKPOS_SYNC_ENABLED:-true}
      MIKPOS_AUTO_SYNC: ${MIKPOS_AUTO_SYNC:-true}
      MIKPOS_SYNC_INTERVAL: ${MIKPOS_SYNC_INTERVAL:-300}
      
      # WhatsApp Business API
      WHATSAPP_ENABLED: ${WHATSAPP_ENABLED:-false}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN:-}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID:-}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN:-}
      
      # MikroTik RouterOS API
      MIKROTIK_HOST: ${MIKROTIK_HOST:-192.168.1.1}
      MIKROTIK_USERNAME: ${MIKROTIK_USERNAME:-admin}
      MIKROTIK_PASSWORD: ${MIKROTIK_PASSWORD:-}
      MIKROTIK_PORT: ${MIKROTIK_PORT:-8728}
      MIKROTIK_SSL_ENABLED: ${MIKROTIK_SSL_ENABLED:-false}
      
    ports:
      - "3000:3000"
    volumes:
      - /DATA/AppData/gardens-net/uploads:/app/public/uploads
      - /DATA/AppData/gardens-net/logs:/app/logs
      - /DATA/AppData/gardens-net/config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gardens-net

networks:
  gardens-net:
    driver: bridge
    name: gardens-net-network
