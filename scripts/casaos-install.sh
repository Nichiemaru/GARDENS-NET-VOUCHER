#!/bin/bash

# GARDENS-NET E-commerce CasaOS Easy Installer
# ============================================

set -e

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Emojis for better UX
ROCKET="🚀"
CHECK="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"
GEAR="⚙️"
FOLDER="📁"
NETWORK="🌐"
DATABASE="💾"
SECURITY="🔐"

echo -e "${CYAN}${ROCKET} GARDENS-NET E-commerce CasaOS Installer${NC}"
echo -e "${CYAN}================================================${NC}"
echo ""

# Function to print colored messages
print_status() {
    echo -e "${BLUE}${INFO} $1${NC}"
}

print_success() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

print_error() {
    echo -e "${RED}${ERROR} $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${WARNING} $1${NC}"
}

# Check if running on CasaOS
check_casaos() {
    print_status "Checking CasaOS environment..."
    
    if [ ! -d "/DATA" ]; then
        print_error "CasaOS not detected! /DATA directory not found."
        print_warning "This installer is designed for CasaOS systems."
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker not found! Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose not found! Please install Docker Compose first."
        exit 1
    fi
    
    print_success "CasaOS environment verified!"
}

# Create application directories
create_directories() {
    print_status "Creating application directories..."
    
    APP_DIR="/DATA/AppData/gardens-net"
    
    sudo mkdir -p "$APP_DIR"/{uploads,logs,config,database,redis,ssl,backups}
    sudo chown -R $USER:$USER "$APP_DIR"
    
    print_success "Directories created at $APP_DIR"
}

# Download configuration files
download_configs() {
    print_status "Downloading configuration files..."
    
    cd "$APP_DIR"
    
    # Download docker-compose.yml
    if curl -fsSL -o docker-compose.yml "https://raw.githubusercontent.com/gardens-net/ecommerce/main/casaos-docker-compose.yml"; then
        print_success "Docker Compose configuration downloaded"
    else
        print_error "Failed to download Docker Compose configuration"
        exit 1
    fi
    
    # Download database initialization
    if curl -fsSL -o init-db.sql "https://raw.githubusercontent.com/gardens-net/ecommerce/main/scripts/init-db.sql"; then
        print_success "Database initialization script downloaded"
    else
        print_error "Failed to download database script"
        exit 1
    fi
    
    # Create environment file
    cat > .env << EOF
# GARDENS-NET E-commerce Configuration
# Generated by CasaOS installer on $(date)

# Application Settings
NODE_ENV=production
NEXT_PUBLIC_BASE_URL=http://$(hostname -I | awk '{print $1}'):3000
NEXTAUTH_SECRET=$(openssl rand -base64 32)

# Database Configuration
DATABASE_URL=postgresql://gardens_user:gardens_secure_2024@postgres:5432/gardens_net
DB_PASSWORD=gardens_secure_2024

# Redis Configuration  
REDIS_URL=redis://:redis_secure_2024@redis:6379
REDIS_PASSWORD=redis_secure_2024

# MikPos Integration (Configure after installation)
MIKPOS_BASE_URL=http://192.168.1.100:8080
MIKPOS_API_KEY=your_mikpos_api_key_here
MIKPOS_WEBHOOK_SECRET=mikpos_webhook_secret_2024
MIKPOS_SYNC_ENABLED=true

# WhatsApp Business API (Optional)
WHATSAPP_ENABLED=false
WHATSAPP_ACCESS_TOKEN=your_whatsapp_token_here
WHATSAPP_PHONE_NUMBER_ID=your_phone_number_id_here

# MikroTik RouterOS API
MIKROTIK_HOST=192.168.1.1
MIKROTIK_USERNAME=admin
MIKROTIK_PASSWORD=your_mikrotik_password_here
MIKROTIK_PORT=8728

# Security
MIKPOS_WEBHOOK_URL=http://$(hostname -I | awk '{print $1}'):3000/api/mikpos/webhook
WHATSAPP_WEBHOOK_VERIFY_TOKEN=whatsapp_verify_$(openssl rand -hex 8)
EOF
    
    print_success "Environment configuration created"
}

# Pull Docker images
pull_images() {
    print_status "Pulling Docker images..."
    
    docker-compose pull || {
        print_error "Failed to pull Docker images"
        print_warning "Trying alternative registry..."
        
        # Try with alternative image sources
        sed -i 's|ghcr.io/gardens-net/ecommerce:latest|gardens-net/ecommerce:latest|g' docker-compose.yml
        docker-compose pull || {
            print_error "Failed to pull images from alternative registry"
            exit 1
        }
    }
    
    print_success "Docker images downloaded successfully"
}

# Start services with error handling
start_services() {
    print_status "Starting GARDENS-NET services..."
    
    # Start database first
    docker-compose up -d postgres redis
    
    print_status "Waiting for database to be ready..."
    sleep 15
    
    # Check if database is ready
    for i in {1..30}; do
        if docker-compose exec -T postgres pg_isready -U gardens_user; then
            print_success "Database is ready!"
            break
        fi
        
        if [ $i -eq 30 ]; then
            print_error "Database failed to start after 30 attempts"
            print_warning "Checking database logs..."
            docker-compose logs postgres
            exit 1
        fi
        
        echo -n "."
        sleep 2
    done
    
    # Start main application
    docker-compose up -d app
    
    print_status "Waiting for application to be ready..."
    sleep 20
    
    # Check if application is ready
    APP_IP=$(hostname -I | awk '{print $1}')
    for i in {1..30}; do
        if curl -f -s "http://$APP_IP:3000/api/health" > /dev/null 2>&1; then
            print_success "Application is ready!"
            break
        fi
        
        if [ $i -eq 30 ]; then
            print_error "Application failed to start after 30 attempts"
            print_warning "Checking application logs..."
            docker-compose logs app
            exit 1
        fi
        
        echo -n "."
        sleep 2
    done
}

# Verify installation
verify_installation() {
    print_status "Verifying installation..."
    
    # Check container status
    if ! docker-compose ps | grep -q "Up"; then
        print_error "Some containers are not running properly"
        docker-compose ps
        exit 1
    fi
    
    # Check application health
    APP_IP=$(hostname -I | awk '{print $1}')
    if ! curl -f -s "http://$APP_IP:3000" > /dev/null; then
        print_error "Application is not responding"
        exit 1
    fi
    
    print_success "Installation verified successfully!"
}

# Setup firewall rules (if UFW is available)
setup_firewall() {
    if command -v ufw &> /dev/null; then
        print_status "Configuring firewall..."
        sudo ufw allow 3000/tcp comment "GARDENS-NET E-commerce"
        print_success "Firewall configured"
    fi
}

# Create management scripts
create_management_scripts() {
    print_status "Creating management scripts..."
    
    # Create start script
    cat > start.sh << 'EOF'
#!/bin/bash
cd /DATA/AppData/gardens-net
docker-compose up -d
echo "✅ GARDENS-NET E-commerce started!"
EOF
    
    # Create stop script
    cat > stop.sh << 'EOF'
#!/bin/bash
cd /DATA/AppData/gardens-net
docker-compose down
echo "🛑 GARDENS-NET E-commerce stopped!"
EOF
    
    # Create restart script
    cat > restart.sh << 'EOF'
#!/bin/bash
cd /DATA/AppData/gardens-net
docker-compose restart
echo "🔄 GARDENS-NET E-commerce restarted!"
EOF
    
    # Create backup script
    cat > backup.sh << 'EOF'
#!/bin/bash
cd /DATA/AppData/gardens-net
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
docker-compose exec -T postgres pg_dump -U gardens_user gardens_net > "$BACKUP_DIR/database.sql"
cp -r uploads logs config "$BACKUP_DIR/"
echo "💾 Backup created at: $BACKUP_DIR"
EOF
    
    # Create update script
    cat > update.sh << 'EOF'
#!/bin/bash
cd /DATA/AppData/gardens-net
echo "🔄 Updating GARDENS-NET E-commerce..."
docker-compose pull
docker-compose up -d
echo "✅ Update completed!"
EOF
    
    chmod +x *.sh
    print_success "Management scripts created"
}

# Display success information
show_success_info() {
    APP_IP=$(hostname -I | awk '{print $1}')
    
    echo ""
    echo -e "${GREEN}${ROCKET} GARDENS-NET E-commerce installed successfully!${NC}"
    echo -e "${GREEN}================================================${NC}"
    echo ""
    echo -e "${CYAN}${NETWORK} Access Information:${NC}"
    echo -e "   🌐 Web Interface: ${WHITE}http://$APP_IP:3000${NC}"
    echo -e "   👤 Admin Panel: ${WHITE}http://$APP_IP:3000/admin${NC}"
    echo -e "   📊 MikPos Dashboard: ${WHITE}http://$APP_IP:3000/mikpos/dashboard${NC}"
    echo -e "   🛒 Customer Portal: ${WHITE}http://$APP_IP:3000/customer${NC}"
    echo ""
    echo -e "${CYAN}${SECURITY} Default Credentials:${NC}"
    echo -e "   📧 Email: ${YELLOW}admin@gardens-net.com${NC}"
    echo -e "   🔑 Password: ${YELLOW}admin123${NC} ${RED}(Change immediately!)${NC}"
    echo ""
    echo -e "${CYAN}${FOLDER} Data Locations:${NC}"
    echo -e "   📂 App Data: ${WHITE}/DATA/AppData/gardens-net${NC}"
    echo -e "   📸 Uploads: ${WHITE}/DATA/AppData/gardens-net/uploads${NC}"
    echo -e "   📝 Logs: ${WHITE}/DATA/AppData/gardens-net/logs${NC}"
    echo -e "   💾 Database: ${WHITE}/DATA/AppData/gardens-net/database${NC}"
    echo ""
    echo -e "${CYAN}${GEAR} Management Commands:${NC}"
    echo -e "   🚀 Start: ${WHITE}cd /DATA/AppData/gardens-net && ./start.sh${NC}"
    echo -e "   🛑 Stop: ${WHITE}cd /DATA/AppData/gardens-net && ./stop.sh${NC}"
    echo -e "   🔄 Restart: ${WHITE}cd /DATA/AppData/gardens-net && ./restart.sh${NC}"
    echo -e "   💾 Backup: ${WHITE}cd /DATA/AppData/gardens-net && ./backup.sh${NC}"
    echo -e "   🔄 Update: ${WHITE}cd /DATA/AppData/gardens-net && ./update.sh${NC}"
    echo ""
    echo -e "${CYAN}${INFO} Next Steps:${NC}"
    echo -e "   1. ${WHITE}Change default admin password${NC}"
    echo -e "   2. ${WHITE}Configure MikroTik router settings${NC}"
    echo -e "   3. ${WHITE}Setup WhatsApp Business API (optional)${NC}"
    echo -e "   4. ${WHITE}Configure MikPos integration${NC}"
    echo ""
    echo -e "${GREEN}🎉 Enjoy using GARDENS-NET E-commerce!${NC}"
    echo ""
}

# Error handling function
handle_error() {
    print_error "Installation failed at step: $1"
    print_warning "Cleaning up..."
    
    cd /DATA/AppData/gardens-net 2>/dev/null || true
    docker-compose down 2>/dev/null || true
    
    print_warning "Check the logs above for more details"
    print_warning "You can retry the installation or report the issue"
    exit 1
}

# Main installation process
main() {
    trap 'handle_error "Unknown error"' ERR
    
    echo -e "${PURPLE}Starting GARDENS-NET E-commerce installation...${NC}"
    echo ""
    
    check_casaos || handle_error "CasaOS check"
    create_directories || handle_error "Directory creation"
    download_configs || handle_error "Configuration download"
    pull_images || handle_error "Docker image pull"
    start_services || handle_error "Service startup"
    verify_installation || handle_error "Installation verification"
    setup_firewall || handle_error "Firewall setup"
    create_management_scripts || handle_error "Management script creation"
    
    show_success_info
}

# Run main installation
main "$@"
